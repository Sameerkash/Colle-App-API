type Post {
  _id: ID!
  title: String!
  content: String!
  imageUrl: String!
  uid: User!
  createdAt: String!
}

type Student {
  _id: ID!
  email: String!
  password: String!
  name: String!
  displayName: String!
  phone: Int!
#   link: JSON
  imageUrl: String
  usn: String
  branch: String
  batch: String
}

type Faculty {
  _id: ID!
  email: String!
  password: String!
  name: String!
  displayName: String!
  phone: Int!
#   link: JSON
  imageUrl: String
  facultyId: String
  department: String
  role: String
}

type User {
  _id: ID!
  email: String!
  password: String!
  name: String!
  displayName: String!
  phone: Int!
#   link: JSON
  imageUrl: String
}

type AuthData {
  token: String!
  userId: String!
}

type PostData {
  posts: [Post!]!
  postCount: Int!
}

input StudentInputData {
  email: String!
  name: String!
  password: String!
  branch: String!
  batch: String!
  usn: String!
  phone: Int!
  displayName: String!
}

input FacultyInoutData {
  email: String!
  name: String!
  password: String!
  department: String!
  role: String!
  facultyId: String!
  phone: Int!
  displayName: String!
}

input PostInputData {
  title: String!
  content: String!
  imageUrl: String
}

type Query {
  login(email: String!, password: String!): AuthData!
  posts(page: Int): PostData!
  post(id: ID!): Post!
  user: User!
}

type Mutation {
  createStudent(userInput: StudentInputData): Student!
  createFaculty(userInput: FacultyInoutData): Faculty!
  createPost(postInput: PostInputData): Post!
  updatePost(id: ID!, postInput: PostInputData): Post!
  deletePost(id: ID!): Boolean!
  updateProfile(id: ID!): User!
}
